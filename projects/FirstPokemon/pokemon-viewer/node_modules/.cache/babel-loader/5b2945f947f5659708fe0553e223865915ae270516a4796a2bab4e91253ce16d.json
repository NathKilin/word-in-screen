{"ast":null,"code":"var _jsxFileName = \"C:\\\\1A_IITC\\\\Mine\\\\projects\\\\FirstPokemon\\\\pokemon-viewer\\\\src\\\\components\\\\PokemonList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/PokemonList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PokemonList() {\n  _s();\n  // This is a variable to store the list of Pokémon\n  // We're using 'useState' to make it reactive\n  // const [current value, function to update it] = useState(initial value)\n  const [pokemons, setPokemons] = useState([]);\n\n  // Variable to indicate if the data is still loading\n  // Starts as true because we are fetching data from the API\n  const [loading, setLoading] = useState(true);\n\n  // useEffect:\n  // What to do (the function) and when to do it (the dependencies [])\n  useEffect(() => {\n    // Function to fetch Pokémon data from the API\n    async function fetchPokemons() {\n      try {\n        // Fetching a list of 1302 Pokémon from the API\n        const response = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=1302');\n        // Converting the response into a JSON object\n        const data = await response.json();\n\n        // Now we need detailed data for each Pokémon in the list\n        const detailedPokemons = await Promise.all(\n        // For each Pokémon, we fetch its details using the URL provided\n        data.results.map(async pokemon => {\n          const detailsResponse = await fetch(pokemon.url); // Fetch details\n          const details = await detailsResponse.json(); // Convert to JSON\n\n          // We return an object with all the info we need for each Pokémon\n          return {\n            name: pokemon.name,\n            // Pokémon name\n            id: details.id,\n            // Pokémon unique ID\n            types: details.types.map(typeInfo => typeInfo.type.name),\n            // Pokémon types (e.g., Grass, Poison)\n            stats: details.stats.map(stat => ({\n              name: stat.stat.name,\n              // Stat name (e.g., HP, Attack)\n              value: stat.base_stat // Stat value\n            })),\n            image: details.sprites.front_default // Default Pokémon image (front)\n          };\n        }));\n\n        // Update the state with the list of detailed Pokémon\n        setPokemons(detailedPokemons);\n      } catch (error) {\n        // If something goes wrong, log the error in the console\n        console.error('Couldn´t fetch Pokélist. Error: ', error);\n      } finally {\n        // Loading is done, whether it succeeded or failed\n        setLoading(false);\n      }\n    }\n\n    // Calling the function to fetch the data\n    fetchPokemons();\n    // The empty array [] means this runs only once when the component is first loaded\n  }, []);\n\n  // If the data is still loading, show this text\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Pok\\xE9mon...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If the data has finished loading, build and display the Pokémon cards\n  return (\n    /*#__PURE__*/\n    // Container for all Pokémon cards\n    _jsxDEV(\"div\", {\n      className: \"pokemon-grid\",\n      children: pokemons.map(pokemon => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pokemon-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"pokemon-image\",\n          src: pokemon.image,\n          alt: pokemon.name // Alt text for accessibility\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"pokemon-name\",\n          children: pokemon.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"pokemon-id\",\n          children: [\"ID: #\", pokemon.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"pokemon-types\",\n          children: [\"Types: \", pokemon.types.join(\", \"), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pokemon-stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Stats:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: pokemon.stats.map((stat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [stat.name, \": \", stat.value]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, pokemon.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(PokemonList, \"fQreVV4R/KyuEkWz0eG2YtCgNFw=\");\n_c = PokemonList;\nexport default PokemonList;\nvar _c;\n$RefreshReg$(_c, \"PokemonList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PokemonList","_s","pokemons","setPokemons","loading","setLoading","fetchPokemons","response","fetch","data","json","detailedPokemons","Promise","all","results","map","pokemon","detailsResponse","url","details","name","id","types","typeInfo","type","stats","stat","value","base_stat","image","sprites","front_default","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","join","index","_c","$RefreshReg$"],"sources":["C:/1A_IITC/Mine/projects/FirstPokemon/pokemon-viewer/src/components/PokemonList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/PokemonList.css\";\r\n\r\nfunction PokemonList() {\r\n    // This is a variable to store the list of Pokémon\r\n    // We're using 'useState' to make it reactive\r\n    // const [current value, function to update it] = useState(initial value)\r\n    const [pokemons, setPokemons] = useState([]);\r\n\r\n    // Variable to indicate if the data is still loading\r\n    // Starts as true because we are fetching data from the API\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // useEffect:\r\n    // What to do (the function) and when to do it (the dependencies [])\r\n    useEffect(() => {\r\n        // Function to fetch Pokémon data from the API\r\n        async function fetchPokemons() {\r\n            try {\r\n                // Fetching a list of 1302 Pokémon from the API\r\n                const response = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=1302');\r\n                // Converting the response into a JSON object\r\n                const data = await response.json();\r\n\r\n                // Now we need detailed data for each Pokémon in the list\r\n                const detailedPokemons = await Promise.all(\r\n                    // For each Pokémon, we fetch its details using the URL provided\r\n                    data.results.map(async (pokemon) => {\r\n                        const detailsResponse = await fetch(pokemon.url); // Fetch details\r\n                        const details = await detailsResponse.json(); // Convert to JSON\r\n\r\n                        // We return an object with all the info we need for each Pokémon\r\n                        return {\r\n                            name: pokemon.name, // Pokémon name\r\n                            id: details.id, // Pokémon unique ID\r\n                            types: details.types.map((typeInfo) => typeInfo.type.name), // Pokémon types (e.g., Grass, Poison)\r\n                            stats: details.stats.map((stat) => ({\r\n                                name: stat.stat.name, // Stat name (e.g., HP, Attack)\r\n                                value: stat.base_stat // Stat value\r\n                            })), \r\n                            image: details.sprites.front_default, // Default Pokémon image (front)\r\n                        };\r\n                    })\r\n                );\r\n\r\n                // Update the state with the list of detailed Pokémon\r\n                setPokemons(detailedPokemons);\r\n            } catch (error) {\r\n                // If something goes wrong, log the error in the console\r\n                console.error('Couldn´t fetch Pokélist. Error: ', error);\r\n            } finally {\r\n                // Loading is done, whether it succeeded or failed\r\n                setLoading(false);\r\n            }\r\n        }\r\n\r\n        // Calling the function to fetch the data\r\n        fetchPokemons();\r\n        // The empty array [] means this runs only once when the component is first loaded\r\n    }, []);\r\n\r\n    // If the data is still loading, show this text\r\n    if (loading) {\r\n        return <p>Loading Pokémon...</p>;\r\n    }\r\n\r\n    // If the data has finished loading, build and display the Pokémon cards\r\n    return (\r\n        // Container for all Pokémon cards\r\n        <div className=\"pokemon-grid\">\r\n            {/* Loop through the Pokémon array and create a card for each Pokémon */}\r\n            {pokemons.map((pokemon) => (\r\n                <div className=\"pokemon-card\" key={pokemon.id}>\r\n                    {/* Pokémon image */}\r\n                    <img\r\n                        className=\"pokemon-image\"\r\n                        src={pokemon.image}\r\n                        alt={pokemon.name} // Alt text for accessibility\r\n                    />\r\n                    {/* Pokémon name */}\r\n                    <h3 className=\"pokemon-name\">{pokemon.name}</h3>\r\n                    {/* Pokémon ID */}\r\n                    <p className=\"pokemon-id\">ID: #{pokemon.id}</p>\r\n                    {/* Pokémon types */}\r\n                    <p className=\"pokemon-types\">\r\n                        Types: {pokemon.types.join(\", \")} {/* Join the types with commas */}\r\n                    </p>\r\n                    {/* Pokémon stats */}\r\n                    <div className=\"pokemon-stats\">\r\n                        <h4>Stats:</h4>\r\n                        <ul>\r\n                            {/* Loop through the stats array and display each stat */}\r\n                            {pokemon.stats.map((stat, index) => (\r\n                                <li key={index}>\r\n                                    {stat.name}: {stat.value}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}