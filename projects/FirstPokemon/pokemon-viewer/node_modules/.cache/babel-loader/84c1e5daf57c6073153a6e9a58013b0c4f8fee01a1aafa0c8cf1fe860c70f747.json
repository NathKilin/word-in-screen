{"ast":null,"code":"var _jsxFileName = \"C:\\\\1A_IITC\\\\Mine\\\\projects\\\\FirstPokemon\\\\pokemon-viewer\\\\src\\\\components\\\\PokemonList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/PokemonList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PokemonList() {\n  _s();\n  //variable to store list using the Hook 'useState'\n  //const [howItIs variable, update Function] = useState(original value)\n  const [pokemons, setPokemons] = useState([]);\n  //variable to indicate that the data is processing\n  //(starts empty)\n  //using 'useState' again\n  const [loading, setLoading] = useState(true);\n\n  //useEffect () => what to do [] when to do\n  useEffect(() => {\n    //function to seach the API\n    async function fetchPokemons() {\n      try {\n        //fetching 50 pokemons\n        const response = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=1302');\n        //converting to data to a json response\n        const data = await response.json();\n        //updating the state with pokemons\n        setPokemons(data.results);\n        //storing the pokemons\n      } catch (error) {\n        console.error('Couldn´t fetch Pokélist. Error ', error);\n      } finally {\n        //giving an end to the loading\n        setLoading(false);\n      }\n    }\n    //calling the function\n    fetchPokemons();\n    //telling the fetch to be executed only once\n  },\n  //that´s what to do\n\n  [] //that´s when to do\n  );\n\n  //nice text while loading\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Pok\\xE9mon...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n\n  //making the list with names of the pokémons\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pokemon-grid\",\n    children: pokemons.map((pokemon, index) => {\n      const pokemonId = pokemon.url.split(\"/\").filter(Boolean).pop();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pokemon-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"pokemon-image\",\n          src: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemonId}.png`,\n          alt: pokemon.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"pokemon-name\",\n          children: pokemon.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(PokemonList, \"fQreVV4R/KyuEkWz0eG2YtCgNFw=\");\n_c = PokemonList;\nexport default PokemonList;\nvar _c;\n$RefreshReg$(_c, \"PokemonList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","PokemonList","_s","pokemons","setPokemons","loading","setLoading","fetchPokemons","response","fetch","data","json","results","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","pokemon","index","pokemonId","url","split","filter","Boolean","pop","src","alt","name","_c","$RefreshReg$"],"sources":["C:/1A_IITC/Mine/projects/FirstPokemon/pokemon-viewer/src/components/PokemonList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/PokemonList.css\"\r\n\r\nfunction PokemonList(){\r\n    //variable to store list using the Hook 'useState'\r\n//const [howItIs variable, update Function] = useState(original value)\r\n    const [pokemons, setPokemons] = useState([]);\r\n    //variable to indicate that the data is processing\r\n    //(starts empty)\r\n    //using 'useState' again\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    //useEffect () => what to do [] when to do\r\n    useEffect(\r\n        () => {\r\n\r\n        //function to seach the API\r\n        async function fetchPokemons(){\r\n            try{\r\n                //fetching 50 pokemons\r\n                const response = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=1302');\r\n                //converting to data to a json response\r\n                const data = await response.json();\r\n                //updating the state with pokemons\r\n                setPokemons(data.results);\r\n                //storing the pokemons\r\n            } catch (error) {\r\n                console.error('Couldn´t fetch Pokélist. Error ', error);\r\n            } finally {\r\n                //giving an end to the loading\r\n                setLoading(false);\r\n            }\r\n        }\r\n            //calling the function\r\n        fetchPokemons();\r\n        //telling the fetch to be executed only once\r\n    \r\n    }, //that´s what to do\r\n\r\n    [] //that´s when to do\r\n);\r\n\r\n    //nice text while loading\r\n    if (loading) {\r\n        return <p>Loading Pokémon...</p>;\r\n    }\r\n\r\n    //making the list with names of the pokémons\r\n    return (\r\n        <div className=\"pokemon-grid\">\r\n            {pokemons.map((pokemon, index) => {\r\n                const pokemonId = pokemon.url.split(\"/\").filter(Boolean).pop();\r\n\r\n                return(\r\n                    <div className=\"pokemon-card\" key={index}>\r\n                        <img\r\n                        className=\"pokemon-image\"\r\n                        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemonId}.png`}\r\n                        alt={pokemon.name}\r\n                        />\r\n                        <h3 className=\"pokemon-name\">{pokemon.name}</h3>\r\n                    </div>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PokemonList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,2BAA2B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,WAAWA,CAAA,EAAE;EAAAC,EAAA;EAClB;EACJ;EACI,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C;EACA;EACA;EACA,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CACL,MAAM;IAEN;IACA,eAAeS,aAAaA,CAAA,EAAE;MAC1B,IAAG;QACC;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,CAAC;QAC7E;QACA,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC;QACAP,WAAW,CAACM,IAAI,CAACE,OAAO,CAAC;QACzB;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAC3D,CAAC,SAAS;QACN;QACAP,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ;IACI;IACJC,aAAa,CAAC,CAAC;IACf;EAEJ,CAAC;EAAE;;EAEH,EAAE,CAAC;EACP,CAAC;;EAEG;EACA,IAAIF,OAAO,EAAE;IACT,oBAAOL,OAAA;MAAAe,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACpC;;EAEA;EACA,oBACInB,OAAA;IAAKoB,SAAS,EAAC,cAAc;IAAAL,QAAA,EACxBZ,QAAQ,CAACkB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;MAC9B,MAAMC,SAAS,GAAGF,OAAO,CAACG,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAACC,GAAG,CAAC,CAAC;MAE9D,oBACI7B,OAAA;QAAKoB,SAAS,EAAC,cAAc;QAAAL,QAAA,gBACzBf,OAAA;UACAoB,SAAS,EAAC,eAAe;UACzBU,GAAG,EAAE,4EAA4EN,SAAS,MAAO;UACjGO,GAAG,EAAET,OAAO,CAACU;QAAK;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB,CAAC,eACFnB,OAAA;UAAIoB,SAAS,EAAC,cAAc;UAAAL,QAAA,EAAEO,OAAO,CAACU;QAAI;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA,GANjBI,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOnC,CAAC;IAEd,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAED,CAAC;AAEd;AAACjB,EAAA,CAhEQD,WAAW;AAAAgC,EAAA,GAAXhC,WAAW;AAkEpB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}